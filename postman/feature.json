{
	"info": {
		"_postman_id": "77d623c2-fba6-4d84-a611-64ca3efc6f31",
		"name": "Feature",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33332425"
	},
	"item": [
		{
			"name": "Preparation",
			"item": [
				{
					"name": "Create user with id = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(source.email).equal(target.email, '–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"yandex@yandex.ru\",\r\n    \"name\":  \"Islandec\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with id = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(source.email).equal(target.email, '–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ya@yandex.ru\",\r\n    \"name\":  \"Igor\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category with id = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":  \"game\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event by user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(target.annotation).equal(source.annotation, '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(target.description).equal(source.description, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"–°–∞–º–æ–µ –º–∞—Å—à—Ç–∞–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —ç—Ç–æ–≥–æ –≥–æ–¥–∞\",\r\n    \"category\": 1,\r\n    \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ –≥–æ–¥–∞\",\r\n    \"eventDate\": \"{{eventDate}}\",\r\n    \"location\": {\r\n        \"lat\": 1.02,\r\n        \"lon\": 3.01\r\n    },\r\n    \"title\": \"2100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/:userId/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change state event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(\"2100\", '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–æ');\r",
									"    pm.expect(target.annotation).equal(\"–°–∞–º–æ–µ –º–∞—Å—à—Ç–∞–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —ç—Ç–æ–≥–æ –≥–æ–¥–∞\", '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è');\r",
									"    pm.expect(target.paid.toString()).equal(\"false\", '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è');\r",
									"    pm.expect(target.eventDate).equal(\"2100-08-13 00:00:00\", '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è');\r",
									"    pm.expect(target.description).equal(\"–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ –≥–æ–¥–∞\", '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–æ');\r",
									"    pm.expect(target.participantLimit.toString()).equal(\"0\", '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–æ');\r",
									"    pm.expect(target.location.lat.toString()).equal(\"1.02\", '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è');\r",
									"    pm.expect(target.location.lon.toString()).equal(\"3.01\", '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è');\r",
									"    pm.expect(target.requestModeration.toString()).equal(\"true\", '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è');\r",
									"    pm.expect(target.state.toString()).equal(\"PUBLISHED\", '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/events/:eventId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏–ª–∏ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "subscribers",
			"item": [
				{
					"name": "Subscribe user 1 by user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 204\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:userId/subscribe/:followedId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"subscribe",
								":followedId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "followedId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscribe user 1 by user 2 with 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 409\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:userId/subscribe/:followedId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"subscribe",
								":followedId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "followedId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get followers for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ json –º–∞—Å—Å–∏–≤–∞\", function () {\r",
									"    pm.expect(body).is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name, email\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.equal(2); \r",
									"    pm.expect(target.name).to.equal(\"Igor\"); \r",
									"    pm.expect(target.email).to.equal(\"ya@yandex.ru\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:userId/followers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"followers"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get following for user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ json –º–∞—Å—Å–∏–≤–∞\", function () {\r",
									"    pm.expect(body).is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name, email\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
									"    pm.expect(target.id).to.eql(1);\r",
									"    pm.expect(target.name).to.eql(\"Islandec\");\r",
									"    pm.expect(target.email).to.eql(\"yandex@yandex.ru\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:userId/following",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"following"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsubscribe user 1 by user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 204\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:userId/unsubscribe/:followedId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"unsubscribe",
								":followedId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "followedId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsubscribe user 1 by user 2 with 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 409\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:userId/unsubscribe/:followedId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								":userId",
								"unsubscribe",
								":followedId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "followedId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "eventDate",
			"value": "2100-08-13 00:00:00",
			"type": "string"
		}
	]
}